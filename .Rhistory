locs_sf$tile_key <- tile_keys
# Step 4: Determine file path for each tile_key
download_dir <- file.path(data_directory, "downloads")
mosaic_dir   <- file.path(data_directory, "mosaics")
unique_keys <- unique(tile_keys)
tile_key_paths <- setNames(
vapply(unique_keys, function(k) {
file_name <- paste0(tif_prefix, k, ".tif")
path <- file.path(if (grepl("_x_", k)) mosaic_dir else download_dir, file_name)
if (!file.exists(path)) stop("Missing raster: ", path)
return(path)
}, FUN.VALUE = character(1)),
unique_keys
)
# Step 5: Split by tile group and calculate PPI
loc_groups <- split(locs_sf, locs_sf$tile_key)
results <- list()
for (k in names(loc_groups)) {
message("Processing group: ", k)
loc_subset <- loc_groups[[k]]
raster_path <- tile_key_paths[[k]]
r <- terra::rast(raster_path)
terra::minmax(r)  # Ensure consistent behavior
ppi_result <- calculate_ppi(locs = loc_subset, buffer = buffers_km, compiled_raster = r, progress = progress)
results[[k]] <- ppi_result
}
# Step 6: Recombine and restore original order
final <- do.call(rbind, results)
final <- final[order(final$row_id), ]
final$row_id <- NULL
final$tile_key <- NULL
return(final)
}
ppi_result <- calculate_ppi_chunked(
locations = locations,  # data.frame with lon, lat
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 20)
)
locations_crs = 4326
buffers_km = c(5, 10, 20)
data_directory
tif_prefix = "GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_"
progress = FALSE
tile_schema = schema
locations
# Step 1: Convert locations to sf
locs_sf <- sf::st_as_sf(locations, coords = c(1, 2), crs = locations_crs)
locs_sf$row_id <- seq_len(nrow(locs_sf))  # preserve original order
# Step 2: Get tile list for each location
tile_list <- get_tile_list(locations, tile_schema, buffers_km, locations_crs)
# Step 3: Assign tile group string to each location
tile_keys <- sapply(tile_list, function(x) paste(sort(unique(x)), collapse = "_x_"))
locs_sf$tile_key <- tile_keys
# Step 4: Determine file path for each tile_key
download_dir <- file.path(data_directory, "downloads")
mosaic_dir   <- file.path(data_directory, "mosaics")
unique_keys <- unique(tile_keys)
tile_key_paths <- setNames(
vapply(unique_keys, function(k) {
file_name <- paste0(tif_prefix, k, ".tif")
path <- file.path(if (grepl("_x_", k)) mosaic_dir else download_dir, file_name)
if (!file.exists(path)) stop("Missing raster: ", path)
return(path)
}, FUN.VALUE = character(1)),
unique_keys
)
tile_key_paths
#' Chunked PPI calculation for each unique tile or mosaic combination
#'
#' @param locations A data frame or matrix with longitude and latitude (in that order)
#' @param tile_schema An sf object of GHSL tile polygons with a `tile_id` column
#' @param data_directory The base directory containing "downloads" and "mosaics" folders
#' @param buffers_km Vector of buffer distances (in km) to use in PPI calculation
#' @param locations_crs CRS code for the input coordinates (default is 4326)
#' @param tif_prefix Prefix used in naming .tif files (default matches GHSL 2023 dataset)
#' @param progress Logical. If TRUE, show progress bars in exact_extract
#'
#' @return An sf object with PPI columns, in the same row order as `locations`
#' @export
calculate_ppi_chunked <- function(locations,
tile_schema,
data_directory,
buffers_km = c(5, 10, 20),
locations_crs = 4326,
tif_prefix = "GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_",
progress = FALSE) {
# Step 1: Convert locations to sf
locs_sf <- sf::st_as_sf(locations, coords = c(1, 2), crs = locations_crs)
locs_sf$row_id <- seq_len(nrow(locs_sf))  # preserve original order
# Step 2: Get tile list and raster paths
tile_list <- get_tile_list(locations, tile_schema, buffers_km, locations_crs)
raster_paths <- get_rasters(tile_list, data_directory = data_directory, tif_prefix = tif_prefix, return_paths = TRUE)
# Step 3: Assign file path to each location
locs_sf$path <- unlist(raster_paths)  # safe because output is one path per location
# Step 4: Split by unique raster file and compute PPI per chunk
loc_groups <- split(locs_sf, locs_sf$path)
results <- list()
for (p in names(loc_groups)) {
message("Processing raster: ", basename(p))
r <- terra::rast(p)
terra::minmax(r)  # ensure min/max is available
ppi_result <- calculate_ppi(locs = loc_groups[[p]], buffer = buffers_km, compiled_raster = r, progress = progress)
results[[p]] <- ppi_result
}
# Step 5: Recombine and restore original order
final <- do.call(rbind, results)
final <- final[order(final$row_id), ]
final$row_id <- NULL
final$path <- NULL
return(final)
}
locations
sitedat <- locations
tile_list <- get_tile_list(locations=sitedat, tile_schema = schema)
tile_status <- download_tiles(tile_list, data_directory = raster_directory)
mosaic_files <- create_tile_mosaics(tile_list, data_directory = raster_directory)
# 5. Calculate PPI in chunks
ppi_results <- calculate_ppi_chunked(
locations = sitedat,
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 20),       # you can adjust this to any buffer distances
progress = TRUE                  # shows progress bars
)
#' Calculate PPI for a set of sites or grid cells given one or more buffer distances
#'
#' This function computes the focal mean of population density within one or more buffer distances
#' around a set of input locations or polygons, using the exactextractr package for accurate spatial summaries.
#'
#' @param locs An `sf` object of geospatial features (typically POINTS or POLYGONS).
#' @param buffer A numeric vector of one or more buffer distances (in kilometers) to use in focal mean calculations.
#' @param compiled_raster A `terra` raster object containing population densities.
#' @param progress Logical; if TRUE, shows progress bar during `exactextractr::exact_extract()` operations.
#'
#' @return An `sf` object with additional columns for each PPI buffer (e.g., PPI-10km).
#' @export
calculate_ppi <- function(locs, buffer, compiled_raster, progress = FALSE) {
# Ensure raster has min/max metadata to avoid warnings
compiled_raster <- terra::setMinMax(compiled_raster)
# Message about number and type of geometries
geom_type <- tolower(as.vector(unique(sf::st_geometry_type(locs))))
geom_suffix <- ifelse(nrow(locs) > 1, "s", "")
message("Calculating PPI for ", nrow(locs), " ", geom_type, geom_suffix)
# Perform PPI calculation for each buffer distance
calcs <- lapply(
stats::setNames(buffer, paste0("PPI-", buffer, "km")),
function(b) {
message("... ", b, "km buffer")
buffered <- sf::st_buffer(sf::st_transform(locs, terra::crs(compiled_raster)), dist = b * 1000)
exactextractr::exact_extract(compiled_raster[[1]], buffered, 'mean', progress = progress)
}
)
# Combine results and return
out <- locs
out[paste0("PPI-", buffer, "km")] <- as.data.frame(calcs)
return(out)
}
# 5. Calculate PPI in chunks
ppi_results <- calculate_ppi_chunked(
locations = sitedat,
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 20),       # you can adjust this to any buffer distances
progress = TRUE                  # shows progress bars
)
ppi_results
# Step 1: Convert locations to sf
locs_sf <- sf::st_as_sf(locations, coords = c(1, 2), crs = locations_crs)
locs_sf$row_id <- seq_len(nrow(locs_sf))  # preserve original order
# Step 2: Get tile list and raster paths
tile_list <- get_tile_list(locations, tile_schema, buffers_km, locations_crs)
raster_paths <- get_rasters(tile_list, data_directory = data_directory, tif_prefix = tif_prefix, return_paths = TRUE)
# Step 3: Assign file path to each location
locs_sf$path <- unlist(raster_paths)  # safe because output is one path per location
# Step 4: Split by unique raster file and compute PPI per chunk
loc_groups <- split(locs_sf, locs_sf$path)
results <- list()
loc_groups
for (p in names(loc_groups)) {
message("Processing raster: ", basename(p))
r <- terra::rast(p)
terra::minmax(r)  # ensure min/max is available
ppi_result <- calculate_ppi(locs = loc_groups[[p]], buffer = buffers_km, compiled_raster = r, progress = progress)
results[[p]] <- ppi_result
}
results
final <- do.call(rbind, results)
final
results
bind_rows(results)
dplyr::bind_rows(results)
final <- dplyr::bind_rows( results)
final
tile_list
final <- dplyr::bind_rows( results)
final <- final[order(final$row_id), ]
final$row_id <- NULL
final$path <- gsub(data_directory, "", final$path)
final
data_directory
}
# Step 5: Recombine and restore original order
final <- dplyr::bind_rows( results)
final <- final[order(final$row_id), ]
final$row_id <- NULL
final$path <- sub(paste0("^", normalizePath(data_directory, winslash = "/"), "/?"), "", normalizePath(final$path, winslash = "/"))
final
loc_groups
names(loc_groups)
p <- names(loc_groups)[2]
r <- terra::rast(p)
r
terra::minmax(r)  # ensure min/max is available
?terra::minmax
loc_groups[[p]]
ggplot() + geom_sf(data = loc_groups[[p]])
library(ggplot2)
ggplot() + geom_sf(data = loc_groups[[p]])
ppi_result <- calculate_ppi(locs = loc_groups[[p]], buffer = buffers_km, compiled_raster = r, progress = progress)
ppi_result
terra::minmax(r)
buffers_km
# Specify buffer (in km)
b <- c(1, 2.5, 5, 10, 25, 50)
buffers_km = b
results <- list()
for (p in names(loc_groups)) {
message("Processing raster: ", basename(p))
r <- terra::rast(p)
# terra::minmax(r)  # ensure min/max is available
ppi_result <- calculate_ppi(locs = loc_groups[[p]], buffer = buffers_km, compiled_raster = r, progress = progress)
results[[p]] <- ppi_result
}
# Step 5: Recombine and restore original order
final <- dplyr::bind_rows( results)
final <- final[order(final$row_id), ]
final$row_id <- NULL
final$path <- sub(paste0("^", normalizePath(data_directory, winslash = "/"), "/?"), "", normalizePath(final$path, winslash = "/"))
final
summary(final)
#' Chunked PPI calculation for each unique tile or mosaic combination
#'
#' @param locations A data frame or matrix with longitude and latitude (in that order)
#' @param tile_schema An sf object of GHSL tile polygons with a `tile_id` column
#' @param data_directory The base directory containing "downloads" and "mosaics" folders
#' @param buffers_km Vector of buffer distances (in km) to use in PPI calculation
#' @param locations_crs CRS code for the input coordinates (default is 4326)
#' @param tif_prefix Prefix used in naming .tif files (default matches GHSL 2023 dataset)
#' @param progress Logical. If TRUE, show progress bars in exact_extract
#'
#' @return An sf object with PPI columns, in the same row order as `locations`
#' @export
calculate_ppi_chunked <- function(locations,
tile_schema,
data_directory,
buffers_km = c(5, 10, 20),
locations_crs = 4326,
tif_prefix = "GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_",
progress = FALSE) {
# Step 1: Convert locations to sf
locs_sf <- sf::st_as_sf(locations, coords = c(1, 2), crs = locations_crs)
locs_sf$row_id <- seq_len(nrow(locs_sf))  # preserve original order
# Step 2: Get tile list and raster paths
tile_list <- get_tile_list(locations, tile_schema, buffers_km, locations_crs)
raster_paths <- get_rasters(tile_list, data_directory = data_directory, tif_prefix = tif_prefix, return_paths = TRUE)
# Step 3: Assign file path to each location
locs_sf$path <- unlist(raster_paths)  # safe because output is one path per location
# Step 4: Split by unique raster file and compute PPI per chunk
loc_groups <- split(locs_sf, locs_sf$path)
results <- list()
for (p in names(loc_groups)) {
message("Processing raster: ", basename(p))
r <- terra::rast(p)
# terra::minmax(r)  # ensure min/max is available
ppi_result <- calculate_ppi(locs = loc_groups[[p]], buffer = buffers_km, compiled_raster = r, progress = progress)
results[[p]] <- ppi_result
}
# Step 5: Recombine and restore original order
final <- dplyr::bind_rows( results)
final <- final[order(final$row_id), ]
final$row_id <- NULL
final$path <- sub(paste0("^", normalizePath(data_directory, winslash = "/"), "/?"), "", normalizePath(final$path, winslash = "/"))
return(final)
}
# 5. Calculate PPI in chunks
ppi_results <- calculate_ppi_chunked(
locations = sitedat,
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 100),       # you can adjust this to any buffer distances
progress = TRUE                  # shows progress bars
)
ppi_results
ggplot() + geom_sf(data = ppi_results, color = `PPI-10km`)
ggplot() + geom_sf(data = ppi_results, color = `PPI-100km`)
ggplot() + geom_sf(data = ppi_results)
ggplot() + geom_sf(data = ppi_results, color = PPI-100km)
#' Calculate PPI for a set of sites or grid cells given one or more buffer distances
#'
#' This function computes the focal mean of population density within one or more buffer distances
#' around a set of input locations or polygons, using the exactextractr package for accurate spatial summaries.
#'
#' @param locs An `sf` object of geospatial features (typically POINTS or POLYGONS).
#' @param buffer A numeric vector of one or more buffer distances (in kilometers) to use in focal mean calculations.
#' @param compiled_raster A `terra` raster object containing population densities.
#' @param progress Logical; if TRUE, shows progress bar during `exactextractr::exact_extract()` operations.
#'
#' @return An `sf` object with additional columns for each PPI buffer (e.g., PPI-10km).
#' @export
calculate_ppi <- function(locs, buffer, compiled_raster, progress = FALSE) {
# Ensure raster has min/max metadata to avoid warnings
compiled_raster <- terra::setMinMax(compiled_raster)
# Message about number and type of geometries
geom_type <- tolower(as.vector(unique(sf::st_geometry_type(locs))))
geom_suffix <- ifelse(nrow(locs) > 1, "s", "")
message("Calculating PPI for ", nrow(locs), " ", geom_type, geom_suffix)
# Perform PPI calculation for each buffer distance
calcs <- lapply(
stats::setNames(buffer, paste0("PPI", buffer, "km")),
function(b) {
message("... ", b, "km buffer")
buffered <- sf::st_buffer(sf::st_transform(locs, terra::crs(compiled_raster)), dist = b * 1000)
exactextractr::exact_extract(compiled_raster[[1]], buffered, 'mean', progress = progress)
}
)
# Combine results and return
out <- locs
out[paste0("PPI-", buffer, "km")] <- as.data.frame(calcs)
return(out)
}
# 5. Calculate PPI in chunks
ppi_results <- calculate_ppi_chunked(
locations = sitedat,
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 100),       # you can adjust this to any buffer distances
progress = TRUE                  # shows progress bars
)
ppi_results
locs_sf <- sf::st_as_sf(locations, coords = c(1, 2), crs = locations_crs)
locs_sf$row_id <- seq_len(nrow(locs_sf))  # preserve original order
# Step 2: Get tile list and raster paths
tile_list <- get_tile_list(locations, tile_schema, buffers_km, locations_crs)
raster_paths <- get_rasters(tile_list, data_directory = data_directory, tif_prefix = tif_prefix, return_paths = TRUE)
# Step 3: Assign file path to each location
locs_sf$path <- unlist(raster_paths)  # safe because output is one path per location
# Step 4: Split by unique raster file and compute PPI per chunk
loc_groups <- split(locs_sf, locs_sf$path)
results <- list()
for (p in names(loc_groups)) {
message("Processing raster: ", basename(p))
r <- terra::rast(p)
# terra::minmax(r)  # ensure min/max is available
ppi_result <- calculate_ppi(locs = loc_groups[[p]], buffer = buffers_km, compiled_raster = r, progress = progress)
results[[p]] <- ppi_result
}
results
calculate_ppi
#' Calculate PPI for a set of sites or grid cells given one or more buffer distances
#'
#' This function computes the focal mean of population density within one or more buffer distances
#' around a set of input locations or polygons, using the exactextractr package for accurate spatial summaries.
#'
#' @param locs An `sf` object of geospatial features (typically POINTS or POLYGONS).
#' @param buffer A numeric vector of one or more buffer distances (in kilometers) to use in focal mean calculations.
#' @param compiled_raster A `terra` raster object containing population densities.
#' @param progress Logical; if TRUE, shows progress bar during `exactextractr::exact_extract()` operations.
#'
#' @return An `sf` object with additional columns for each PPI buffer (e.g., PPI-10km).
#' @export
calculate_ppi <- function(locs, buffer, compiled_raster, progress = FALSE) {
# Ensure raster has min/max metadata to avoid warnings
compiled_raster <- terra::setMinMax(compiled_raster)
# Message about number and type of geometries
geom_type <- tolower(as.vector(unique(sf::st_geometry_type(locs))))
geom_suffix <- ifelse(nrow(locs) > 1, "s", "")
message("Calculating PPI for ", nrow(locs), " ", geom_type, geom_suffix)
# Perform PPI calculation for each buffer distance
calcs <- lapply(
stats::setNames(buffer, paste0("PPI", buffer, "km")),
function(b) {
message("... ", b, "km buffer")
buffered <- sf::st_buffer(sf::st_transform(locs, terra::crs(compiled_raster)), dist = b * 1000)
exactextractr::exact_extract(compiled_raster[[1]], buffered, 'mean', progress = progress)
}
)
# Combine results and return
out <- locs
out[paste0("PPI", buffer, "km")] <- as.data.frame(calcs)
return(out)
}
# 5. Calculate PPI in chunks
ppi_results <- calculate_ppi_chunked(
locations = sitedat,
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 100),       # you can adjust this to any buffer distances
progress = TRUE                  # shows progress bars
)
ppi_results
ggplot() + geom_sf(data = ppi_results, color = PPI100km)
ggplot() + geom_sf(data = ppi_results, aes(color = PPI100km))
# 1. Set your base raster directory (must contain "downloads/" and "mosaics/")
raster_directory <- "C:/Users/Eliza/OneDrive - UW/Research/Spatial Data Repository/Population Density Rasters"
# 2. Load the GHSL tile schema (will download it if missing)
schema <- get_tile_schema(data_directory = raster_directory)
# 3. Define your location dataset (must have lon, lat columns in that order)
# Example: PugetSoundSites[, c("lon", "lat")] — already prepped
sites <- PugetSoundSites[, c("lon", "lat")]
PugetSoundSites
# 1. Set your base raster directory (must contain "downloads/" and "mosaics/")
raster_directory <- "C:/Users/Eliza/OneDrive - UW/Research/Spatial Data Repository/Population Density Rasters"
# 2. Load the GHSL tile schema (will download it if missing)
schema <- get_tile_schema(data_directory = raster_directory)
# 3. Define your location dataset (must have lon, lat columns in that order)
# Example: PugetSoundSites[, c("lon", "lat")] — already prepped
sites <- PugetSoundSites[, c("Lon_dd", "Lat_dd")]
# 4. (Optional but recommended) Download and mosaic rasters
tile_list <- get_tile_list(locations=sites, tile_schema = schema)
tile_status <- download_tiles(tile_list, data_directory = raster_directory)
mosaic_files <- create_tile_mosaics(tile_list, data_directory = raster_directory)
# 5. Calculate PPI in chunks
ppi_est <- calculate_ppi_chunked(
locations = sites,
tile_schema = schema,
data_directory = raster_directory,
buffers_km = c(5, 10, 100),       # you can adjust this to any buffer distances
progress = TRUE                  # shows progress bars
)
# 6. View output
head(ppi_est)
data("PugetSoundSites")
head(PugetSoundSites)
# Transform raw coordinates into an sf object
site_sf <- sf::st_as_sf(sites, coords = c("Lon_dd", "Lat_dd"), crs = 4326)
# Load a single population raster (already downloaded)
r <- terra::rast("downloads/GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C9.tif")
# Transform raw coordinates into an sf object
site_sf <- sf::st_as_sf(sites, coords = c("Lon_dd", "Lat_dd"), crs = 4326)
# Load a single population raster (already downloaded)
r <- terra::rast(paste0(raster_directory, "/downloads/GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C9.tif"))
# Run the PPI calculation
ppi_result <- calculate_ppi(
locs = site_sf,
buffer = c(5, 10, 20),
compiled_raster = r,
progress = TRUE
)
ppi_result
usethis::use_package("terra")  # if needed
dir.create("inst/extdata", recursive = TRUE)
buffered_sites <- sf::st_buffer(sf::st_transform(sites_sf, terra::crs(r)), dist = 20000)  # 10 km buffer
site_sf <- sf::st_as_sf(sites, coords = c("Lon_dd", "Lat_dd"), crs = 4326)
# Load a single population raster (already downloaded)
r <- terra::rast(paste0(raster_directory, "/downloads/GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C9.tif"))
buffered_sites <- sf::st_buffer(sf::st_transform(sites_sf, terra::crs(r)), dist = 20000)  # 10 km buffer
site_sf <- sf::st_as_sf(PugetSoundSites, coords = c("Lon_dd", "Lat_dd"), crs = 4326)
# Load a single population raster (already downloaded)
r <- terra::rast(paste0(raster_directory, "/downloads/GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C9.tif"))
buffered_sites <- sf::st_buffer(sf::st_transform(sites_sf, terra::crs(r)), dist = 20000)  # 10 km buffer
PugetSoundSites
site_sf <- sf::st_as_sf(PugetSoundSites, coords = c("Lon_dd", "Lat_dd"), crs = 4326)
r <- terra::rast(paste0(raster_directory, "/downloads/GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C9.tif"))
buffered_sites <- sf::st_buffer(sf::st_transform(sites_sf, terra::crs(r)), dist = 20000)  # 10 km buffer
sites_sf <- sf::st_as_sf(PugetSoundSites, coords = c("Lon_dd", "Lat_dd"), crs = 4326)
# Load a single population raster (already downloaded)
r <- terra::rast(paste0(raster_directory, "/downloads/GHS_BUILT_S_E2030_GLOBE_R2023A_54009_100_V1_0_R4_C9.tif"))
buffered_sites <- sf::st_buffer(sf::st_transform(sites_sf, terra::crs(r)), dist = 20000)  # 10 km buffer
buffered_vect <- terra::vect(buffered_sites)
cropped_raster <- terra::crop(raster, buffered_vect)
cropped_raster <- terra::crop(r, buffered_vect)
terra::writeRaster(
cropped_raster,
filename = "inst/extdata/example_ppi_crop.tif",
overwrite = TRUE
)
list.files("inst/extdata")
path <- system.file("extdata", "example_ppi_crop.tif", package = "MarinePPI")
r <- terra::rast(path)
path
terra::writeRaster(cropped_raster, "inst/extdata/example_ppi_crop.tif", overwrite = TRUE)
#' Load example cropped population raster
#'
#' Returns a SpatRaster object from an example PPI dataset included in the package.
#'
#' @return A `terra::SpatRaster` object
#' @export
load_example_ppi <- function() {
path <- system.file("extdata", "example_ppi_crop.tif", package = "yourpackagename")
terra::rast(path)
}
r <- load_example_ppi()
load_example_ppi
#' Load example cropped population raster
#'
#' Returns a SpatRaster object from an example PPI dataset included in the package.
#'
#' @return A `terra::SpatRaster` object
#' @export
load_example_ppi <- function() {
path <- system.file("extdata", "example_ppi_crop.tif", package = "MarinePPI")
terra::rast(path)
}
# Load a single population raster (already downloaded)
r <- load_example_ppi()
load_example_ppi
devtools::install_github("eheery/MarinePPI")
library(MarinePPI)
raster_directory <- "C:\\Users\\Eliza\\OneDrive - UW\\Research\\Spatial Data Repository\\Population Density Rasters"
data("PugetSoundSites")
head(PugetSoundSites)
